/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Slider as PrismaSlider } from "@prisma/client";

export class SliderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SliderCountArgs, "select">): Promise<number> {
    return this.prisma.slider.count(args);
  }

  async sliders<T extends Prisma.SliderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SliderFindManyArgs>
  ): Promise<PrismaSlider[]> {
    return this.prisma.slider.findMany<Prisma.SliderFindManyArgs>(args);
  }
  async slider<T extends Prisma.SliderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SliderFindUniqueArgs>
  ): Promise<PrismaSlider | null> {
    return this.prisma.slider.findUnique(args);
  }
  async createSlider<T extends Prisma.SliderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SliderCreateArgs>
  ): Promise<PrismaSlider> {
    return this.prisma.slider.create<T>(args);
  }
  async updateSlider<T extends Prisma.SliderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SliderUpdateArgs>
  ): Promise<PrismaSlider> {
    return this.prisma.slider.update<T>(args);
  }
  async deleteSlider<T extends Prisma.SliderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SliderDeleteArgs>
  ): Promise<PrismaSlider> {
    return this.prisma.slider.delete(args);
  }
}
